% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/owl_obj.R
\name{owl}
\alias{owl}
\alias{as.owl}
\alias{is.owl}
\alias{is.manchester_owl}
\title{OWL Objects}
\usage{
as.owl(owlstr, format = "manchester", usesLabels = FALSE)

is.owl(x)

is.manchester_owl(x)
}
\arguments{
\item{owlstr}{a valid OWL expression for the chosen format}

\item{format}{the OWL syntax to which \code{owlstr} conforms - currently only "manchester" (for \href{https://www.w3.org/2007/OWL/draft/owl2-manchester-syntax/}{OWL Manchester Syntax}) is allowed
which applies the "owlmn" type to the returned object}

\item{usesLabels}{logical. If TRUE the owlstr parameter must contain a label-based class expression
to be resolved into OWL Manchester expression composed of IRIs. Labels containing spaces must be
single-quoted, e.g. 'basihyal bone'. Exact label matches will be resolved to term identifiers.
Default is FALSE.}

\item{x}{an object to check}
}
\value{
\code{as.owl} returns an object of type "owl" and a format specific type such as "owlmn",
or a list of such objects. Note that (at least currently) these are in essence character strings, and are recognizable as such by R.

\code{is.owl} returns TRUE if the object is of type "owl" and FALSE
otherwise.

\code{is.manchester_owl} returns TRUE if the object is of type "owlmn" and FALSE
otherwise.
}
\description{
\code{as.owl} creates an object (or a list of objects) of type "owl".
The object to be coerced must be a character vector.
The character vector must be a valid  OWL expression appropriate for the format.
The object returned will have a type appropriate for the format.

\code{is.owl} tests whether an object is of type "owl"

\code{is.manchester_owl} tests whether an object is of type "owlmn"
}
\details{
Create objects of type "owl" that represent OWL expressions.
}
\examples{
as.owl("<http://purl.obolibrary.org/obo/VTO_0034991> 
        or <http://purl.obolibrary.org/obo/VTO_0037519>")
as.owl("Characiformes or Siluriformes", usesLabels = TRUE)
obj <- as.owl("'fin spine' and ('part of' some 'fin spine')", usesLabels = TRUE)
obj
is.character(obj)
}
