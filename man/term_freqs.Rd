% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/term-weights.R
\name{term_freqs}
\alias{term_freqs}
\title{Obtains term frequencies for the Phenoscape KB}
\usage{
term_freqs(
  x,
  as = c("phenotype", "entity", "anatomical_entity", "quality"),
  corpus = c("taxa", "taxon_annotations", "gene_annotations", "genes", "states"),
  decodeIRI = FALSE,
  ...
)
}
\arguments{
\item{x}{a vector or list of one or more terms, either as IRIs or as term
objects.}

\item{as}{the category or categories (a.k.a. type) of the input terms (see \code{\link[=term_category]{term_category()}}).
Possible values are "anatomical_entity" (synonymous with "entity"), "quality", and
"phenotype". Unambiguous abbreviations are acceptable. The value must either be a
single category (applying to all terms), or a vector of categories (of same length as \code{x}).
The default is "phenotype".

Note that at present, support by the KB API for "quality" remains pending and has thus been
disabled as of v0.3.0. Also, mixing different categories of terms is not yet supported, and
doing so will thus raise an error.}

\item{corpus}{the name of the corpus for determining how to count, currently one of the following:
\itemize{
\item "taxon_annotations" (counts phenotype annotations to character states and thus taxa),
\item "states" (counts character states),
\item "taxa" (counts taxa),
\item "gene_annotations" (counts phenotype annotations to genes), and
\item "genes" (counts genes)
}

Unambiguous abbreviations of corpus names are acceptable. The default is "taxa".
Note that at present "taxon_annotations" and "gene_annotations" are not yet
supported by the KB API and will thus result in an error.}

\item{decodeIRI}{boolean. This parameter is deprecated (as of v0.3.x) and must be set
to FALSE (the default). If TRUE is passed an error will be raised. In v0.2.x
when TRUE this parameter would attempt to decode post-composed entity IRIs.
Due to changes in the IRI returned by the Phenoscape KB v2.x API decoding
post-composed entity IRIs is no longer possible. Prior to v0.3.x, the default
value for this parameter was TRUE.}

\item{...}{additional query parameters to be passed to the function querying
for counts, see \code{\link[=pkb_args_to_query]{pkb_args_to_query()}}. This is currently (as of v0.3.0) not
used.}
}
\value{
a vector of frequencies as floating point numbers (between zero
and 1.0), of the same length (and ordering) as the input list of terms.
}
\description{
Determines the frequencies for the given input list of terms, based on
the selected corpus and the type of the terms.
}
\details{
Depending on the corpus selected, the frequencies are queried directly
from pre-computed counts through the KB API, or are calculated based on
matching row counts obtained from query results. Currently, the Phenoscape KB
has precomputed counts for corpora "taxa" and "genes".
}
\note{
Term categories being accurate is vital for obtaining correct counts and
thus frequencies. In earlier (<=0.2.x) releases, auto-determining term
category was an option, but this is no longer supported, in part because it
was potentially time consuming and often inaccurate, in particular for
the many post-composed subsumer terms returned by \code{\link[=subsumer_matrix]{subsumer_matrix()}}. In the
KB v2.0 API, auto-determining the category of a post-composed term is no
longer supported. If the list of terms is legitimately of different categories,
determine (and possibly correct) categories beforehand using \code{\link[=term_category]{term_category()}}.

In earlier (<=0.2.x) releases the "taxon_annotations" corpus was supported, albeit
it's implementation was very slow because it relied on potentially multiple individudal
KB API queries for each term, and this in turn relied on the ability to break down
post-composed expressions into their component terms and expressions, which is (at least
currently) no longer possible. Once the KB API directly supports this corpus, it
can be enabled here again.
}
\examples{
phens <- get_phenotypes(entity = "basihyal bone")
# see which phenotypes we have:
phens$label
# frequencies by counting taxa:
freqs.t <- term_freqs(phens$id, as = "phenotype", corpus = "taxa")
freqs.t
# we can convert this to absolute counts:
freqs.t * corpus_size("taxa")
# frequencies by counting character states:
freqs.s <- term_freqs(phens$id, as = "phenotype", corpus = "states")
freqs.s
# and as absolute counts:
freqs.s * corpus_size("states")
# we can compare the absolute counts by computing a ratio
freqs.s * corpus_size("states") / (freqs.t * corpus_size("taxa"))
}
