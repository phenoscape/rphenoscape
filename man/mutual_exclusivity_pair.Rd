% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutual_exclusivity.R
\name{mutual_exclusivity_pair}
\alias{mutual_exclusivity_pair}
\title{Determine whether two phenotypes are mutually exclusive.}
\usage{
mutual_exclusivity_pair(
  phenotype.a,
  phenotype.b,
  studies = NULL,
  charstates = NULL
)
}
\arguments{
\item{phenotype.a}{character or phenotype object, phenotype ID (IRI) if character, or
a phenotype object obtained by passing phenotype ID to as.phenotype() function.}

\item{phenotype.b}{character or phenotype object, phenotype ID (IRI) if character, or
a phenotype object obtained by passing phenotype ID to as.phenotype() function.}

\item{studies}{character, a vector of study IDs. This is an optional
parameter that acts as a filter in case the user wants to determine
mutual exclusivity based on the evidence found in a particular set of studies.
The default is NULL which means that no filter is applied and the function
looks at all the studies present in the KB database.}

\item{charstates}{dataframe, a dataframe obtained by running
charstates(list(phenotype.a, phenotype.b)) where phenotypes are passed as
phenotype objects. This optional parameter exists to speed up the computation
for the mutual_exclusivity_test() function since mutual_exclusivity_test()
repeatedly calls mutual_exclusivity_pair(). The default is NULL, and it is
not recommended to use this argument while using the mutual_exclusivity_pair()
function as passing this argument makes negligible runtime speedup but increases
the risk of getting a wrong output if the correct charstates dataframe
corresponding to the two input phenotypes is not passed.}
}
\value{
is_pair_mutually_exclusive factor, the mutual exclusivity type among the two phenotypes.
is_pair_mutually_exclusive has the following levels:

'strong_compatibility'  : if the two phenotypes share one or more character-state value(s),
they are mutually compatible (strong evidence).

'weak_compatibility'    : if the two phenotypes do not share any characters,
but there are taxa exhibiting both of their respective character states,
then they are mutually compatible (weak evidence).

'inconclusive_evidence' : default if no evidence supporting or contradicting
mutual exclusivity can be found.

'weak_exclusivity'      : if the two phenotypes do not share any characters,
and there are no taxa exhibiting both of their respective character states,
then they are mutually exclusive (weak evidence).

'strong_exclusivity'    : if the two phenotypes share one or more characters,
but do not share any states, then they are mutually exclusive (strong evidence).

The levels presented above also have the following order:
strong_compatibility < weak_compatibility < inconclusive_evidence < weak_exclusivity < strong_exclusivity

The default exclusivity type "inconclusive_evidence" is present at the center in the order.
The further away a level is from the center level, the stronger the evidence is
that is found to determine compatibility or exclusivity. Exclusivity has higher order because
that is the primary question one is interested to answer.
}
\description{
The function expects the two phenotypes to be passed as two separate arguments, not as a vector.
The order in which the phenotypes are passed does not matter.
}
\examples{
\dontrun{
# Example 1: looking at entire database while determining exclusivity
# get all studies in the database
studies <- pk_get_study_list()

# get all phenotypes in the databse
phenotypes <- get_phenotypes()
phenotypes <- phenotypes$id

# determine mutual exclusivity
exclusivity <- mutual_exclusivity_pair(phenotypes[1], phenotypes[7])


# Example 2: passing phenotype objects and looking at a particular study while determining exclusivity
# get a specific study of interest based on which mutual exclusivity is to be determined
studies <- pk_get_study_list()
study <- studies$id[studies$label == 'Dillman et al. (2016)']

# get phenotypes objects present in the study
phenotypes <- get_phenotypes(study = study)
phenotypes <- as.phenotype(phenotypes, withTaxa=TRUE)

# determine mutual exclusivity
exclusivity <- mutual_exclusivity_pair(phenotype.a = phenotypes[5], phenotype.b = phenotypes[10], studies=study)


# Example 3 - passing charstates dataframe
# get all studies in the database
studies <- pk_get_study_list()

# get all phenotypes in the database
phenotypes <- get_phenotypes()
phenotypes <- phenotypes$id

# get charstates dataframe; phenotypes must be passed as phenotype objects
char_states <- charstates(list(phenotype.a <- as.phenotype(phenotypes[2]), phenotype.b <- as.phenotype(phenotypes[11])))

# determine mutual exclusivity
exclusivity <- mutual_exclusivity_pair(phenotype.a = phenotype.a, phenotype.b = phenotype.b, charstates = char_states)
}

}
